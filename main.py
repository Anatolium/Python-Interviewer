import telebot
import os
import threading
import time
from config import BOT_TOKEN, DB_NAME
import logging
from telebot import types
from backend import (
    init_user as backend_init_user,
    get_report as backend_get_report,
    skip_timer as backend_skip_timer,
    get_question as backend_get_question,
    process_answer as backend_process_answer,
    update_user_stat,
    clear_user_stat as be_clear_user_stat,
    get_notify,
    initialize_database,
    audio_to_text
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

bot = telebot.TeleBot(BOT_TOKEN)
user_states = {}
logging.info("PythonPro Interviewer is being started")

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
def error_handler(func):
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            logging.error(f"Error in {func.__name__}: {str(e)}")
            if args and args[0] and hasattr(args[0], 'chat'):
                bot.send_message(args[0].chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                show_menu(args[0].chat.id)
        return
    return wrapper

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
@error_handler
def handle_start(message):
    user_id = message.from_user.id
    logging.info(f"Received /start command from user {user_id}")
    backend_init_user(user_id)
    bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –≤–∞—à –±–æ—Ç-–∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä –ø–æ Python")
    show_menu(user_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
def show_menu(user_id):
    logging.info(f"Showing menu for user {user_id}")
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    button_start_interview = types.KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é")
    button_request_report = types.KeyboardButton("üìä –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç—á–µ—Ç")
    button_reset_result = types.KeyboardButton("üîÑ –û–±–Ω—É–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
    button_description = types.KeyboardButton("‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞")
    markup.add(button_start_interview, button_request_report, button_reset_result, button_description)
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    logging.info(f"Menu sent to user {user_id}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–Ω—Ç–µ—Ä–≤—å—é
@error_handler
def start_interview(user_id):
    logging.info(f"Starting interview for user {user_id}")
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    button_skip = types.KeyboardButton("‚õîÔ∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å")
    button_end_interview = types.KeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é")
    markup.add(button_skip, button_end_interview)

    question = backend_get_question(user_id)
    if isinstance(question, dict) and "name" in question and "id" in question:
        user_states[user_id] = ("waiting_for_answer", question)
        bot.send_message(user_id, question["name"], reply_markup=markup)
        logging.info(f"Question sent to user {user_id}: {question['name']}")
    else:
        bot.send_message(user_id, "–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?", reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(types.KeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")))
        logging.info(f"No questions available for user {user_id}: {question}")
        user_states[user_id] = ("waiting_for_restart", None)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
@error_handler
def handle_answer(message):
    user_id = message.from_user.id
    user_state = user_states.get(user_id)
    logging.info(f"Handling answer from user {user_id}")

    if user_state and user_state[0] == "waiting_for_answer":
        question = user_state[1]
        if message.content_type == 'text':
            user_response = message.text
            response_type = "text"
            logging.info(f"Received text answer from user {user_id}: {user_response}")
        elif message.content_type == 'voice':
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                logging.info(f"Fetching file info for voice message from user {user_id}")
                file_info = bot.get_file(message.voice.file_id)
                if not file_info or not hasattr(file_info, 'file_path'):
                    logging.error(f"Failed to get file info for voice message from user {user_id}")
                    bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                    return
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
                logging.info(f"Downloading voice file: {file_info.file_path}")
                file = bot.download_file(file_info.file_path)
                if not file:
                    logging.error(f"Failed to download voice file for user {user_id}")
                    bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                    return
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                audio_path = f"temp_{user_id}.ogg"
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if os.path.exists(audio_path):
                    try:
                        os.remove(audio_path)
                        logging.info(f"Removed old temporary file: {audio_path}")
                    except Exception as e:
                        logging.error(f"Failed to remove old temporary file {audio_path}: {str(e)}")
                logging.info(f"Saving voice file to: {audio_path}")
                with open(audio_path, "wb") as f:
                    f.write(file)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
                if not os.path.exists(audio_path):
                    logging.error(f"Audio file was not created: {audio_path}")
                    bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                    return
                bot.send_message(user_id, "–†–∞—Å–ø–æ–∑–Ω–∞—é –∞—É–¥–∏–æ, –æ–∂–∏–¥–∞–π—Ç–µ...")
                user_response = audio_to_text(audio_path)
                response_type = "text"  # –ò–∑–º–µ–Ω–µ–Ω–æ: —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–∞–∫ —Ç–µ–∫—Å—Ç
                if user_response is None:
                    logging.error(f"Failed to transcribe audio for user {user_id}")
                    bot.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                    return
                logging.info(f"Transcribed audio for user {user_id}: {user_response}")
            except Exception as e:
                logging.error(f"Error processing voice for user {user_id}: {str(e)}")
                bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: {str(e)}")
                # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                if 'audio_path' in locals() and os.path.exists(audio_path):
                    try:
                        os.remove(audio_path)
                        logging.info(f"Cleaned up temporary file: {audio_path}")
                    except Exception as e:
                        logging.error(f"Failed to clean up temporary file {audio_path}: {str(e)}")
                return
        else:
            bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return

        bot.send_message(user_id, "–í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É...")
        try:
            result, comment = backend_process_answer(user_id, user_response, response_type)
            bot.send_message(user_id, result)
            bot.send_message(user_id, comment)
            update_user_stat(user_id, question['id'], 1 if result.lower() == "–≤–µ—Ä–Ω–æ" else 0)
            user_states[user_id] = ("menu", None)
        except Exception as e:
            logging.error(f"Error processing answer for user {user_id}: {str(e)}")
            bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        start_interview(user_id)
    elif user_state and user_state[0] == "waiting_for_restart":
        if message.text == "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
            restart_interview(user_id)
    else:
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
@error_handler
def skip_question(user_id):
    logging.info(f"Skipping question for user {user_id}")
    backend_skip_timer(user_id)
    user_states[user_id] = ("menu", None)
    start_interview(user_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é
@error_handler
def end_interview(user_id):
    logging.info(f"Ending interview for user {user_id}")
    backend_skip_timer(user_id)
    user_states[user_id] = ("menu", None)
    show_menu(user_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é
@error_handler
def restart_interview(user_id):
    logging.info(f"Restarting interview for user {user_id}")
    be_clear_user_stat(user_id)
    start_interview(user_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@error_handler
def clear_user_stat(user_id):
    be_clear_user_stat(user_id)
    bot.send_message(user_id, "–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—ã–ª –æ–±–Ω—É–ª–µ–Ω.")
    show_menu(user_id)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
commands = {
    "üöÄ –ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é": lambda message: start_interview(message.from_user.id),
    "üìä –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç—á–µ—Ç": lambda message: bot.send_message(message.from_user.id, backend_get_report(message.from_user.id)),
    "üîÑ –û–±–Ω—É–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç": lambda message: clear_user_stat(message.from_user.id),
    "‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞": lambda message: bot.send_message(message.from_user.id, "–Ø - –≤–∞—à –±–æ—Ç, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞–≤—ã–∫–æ–≤ –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ Python."),
    "‚õîÔ∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å": lambda message: skip_question(message.from_user.id),
    "üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é": lambda message: end_interview(message.from_user.id),
    "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ": lambda message: restart_interview(message.from_user.id)
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text', 'voice'])
@error_handler
def handle_text_and_voice(message):
    user_id = message.from_user.id
    logging.info(f"Received message from user {user_id}: {message.text if message.content_type == 'text' else 'voice'}")
    if message.content_type == 'text' and message.text in commands:
        commands[message.text](message)
    elif user_states.get(user_id) and user_states[user_id][0] in ["waiting_for_answer", "waiting_for_restart"]:
        handle_answer(message)
    else:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")

# –¢–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def check_timers():
    import sqlite3
    from datetime import datetime
    while True:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        cursor.execute('''
            SELECT user_id, question_id
            FROM user_notify
            WHERE timedate <= ? AND active = 1
        ''', (current_time,))
        notifications = cursor.fetchall()
        for user_id, question_id in notifications:
            logging.info(f"Timer expired for user {user_id}, question {question_id}")
            if user_states.get(user_id, [None])[0] == "waiting_for_answer":
                bot.send_message(user_id, "–í—Ä–µ–º—è –≤—ã—à–ª–æ.")
                get_notify(user_id)
                user_states[user_id] = ("menu", None)
                start_interview(user_id)
        conn.close()
        time.sleep(60)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
initialize_database()
from db_from_csv import db_from_csv
db_from_csv()

# –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
timer_thread = threading.Thread(target=check_timers, daemon=True)
timer_thread.start()

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
while True:
    try:
        logging.info("Starting bot polling")
        bot.polling(none_stop=True)
    except Exception as e:
        logging.error(f"Polling error: {str(e)}")
        time.sleep(1)
